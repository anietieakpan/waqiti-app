server:
  port: 8084

spring:
  application:
    name: notification-service

  # Database configuration
  datasource:
    url: jdbc:postgresql://localhost:5432/p2p_finance
    username: app_user
    password: ${DB_PASSWORD:strongpassword}

  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    show-sql: false

  # Database migrations
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true

  # Kafka configuration
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: notification-service
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: com.p2pfinance.notification.event
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

  # Redis cache
  data:
    redis:
      host: localhost
      port: 6379

  # Email configuration
  mail:
    host: ${MAIL_HOST:localhost}
    port: ${MAIL_PORT:1025}
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail.smtp.auth: ${MAIL_SMTP_AUTH:false}
      mail.smtp.starttls.enable: ${MAIL_SMTP_STARTTLS:false}

  # Thymeleaf configuration
  thymeleaf:
    enabled: true
    cache: false
    check-template: true
    check-template-location: true
    prefix: classpath:/templates/
    suffix: .html
    encoding: UTF-8

# External services
user-service:
  url: http://localhost:8081

# Firebase configuration
firebase:
  config-file: ${FIREBASE_CONFIG_FILE:firebase-service-account.json}

# Security
security:
  jwt:
    token:
      secret-key: ${JWT_SECRET:c3VwZXJzZWNyZXRrZXljYW50YnVzdA==} # Base64 encoded value

# Notification settings
notification:
  email:
    from: no-reply@p2pfinance.com
    personal: P2P Finance
  sms:
    from: ${SMS_FROM:+12345678900}

# Resilience4j configuration
resilience4j:
  circuitbreaker:
    instances:
      userService:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
        eventConsumerBufferSize: 10
  retry:
    instances:
      userService:
        maxAttempts: 3
        waitDuration: 1s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2

# Cache configuration
cache:
  templates:
    ttl: 3600 # Cache templates for 1 hour

# Logging
logging:
  level:
    root: INFO
    com.p2pfinance: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/${spring.application.name}.log

# Management endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,metrics
  metrics:
    export:
      prometheus:
        enabled: true
  health:
    circuitbreakers:
      enabled: true